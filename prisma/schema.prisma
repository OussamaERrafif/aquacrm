datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PartyType {
  BUYER
  SELLER
}

model Party {
  id      String   @id @default(cuid())
  name    String
  company String?
  email   String   @unique
  phone   String?
  address String?
  type    PartyType

  invoices Invoice[]
  loans    Loan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fish {
  id       String @id @default(cuid())
  name     String @unique
  category String
  status   String
  price    Float
  stock    Int
  minStock Int
  supplier String
  imageUrl String
  imageHint String

  invoiceItems InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  type          String // "buy" or "sell"
  date          DateTime @default(now())
  dueDate       DateTime
  totalAmount   Float
  status        String // "Paid", "Unpaid", "Overdue"

  partyId String
  party   Party  @relation(fields: [partyId], references: [id], onDelete: Cascade)

  items InvoiceItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id           String @id @default(cuid())
  length       String
  weight       Float
  pricePerKilo Float

  fishId String
  fish   Fish   @relation(fields: [fishId], references: [id])

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id                  String   @id @default(cuid())
  loanId              String   @unique @default(cuid())
  amount              Float
  disbursementDate    DateTime
  repaymentSchedule   String
  outstandingBalance  Float
  status              String // "Active", "Paid Off", "Defaulted"

  fisherId String
  fisher   Party  @relation(fields: [fisherId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tracability {
  id           String   @id @default(cuid())
  codeMareyeur String
  nomMareyeur  String
  poidsAchete  Float
  poidsVendu   Float
  // The date of the tracability operation (set by user), not the record creation time
  tracabilityDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collaborator {
  id      String   @id @default(cuid())
  name    String
  email   String   @unique
  phone   String?
  address String?

  chargesInvoices ChargesInvoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChargesInvoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  date          DateTime @default(now())
  totalAmount   Float
  status        String // "Paid", "Unpaid"

  collaboratorId String
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)

  charges Charge[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Charge {
  id               String         @id @default(cuid())
  title            String
  price            Float
  chargesInvoiceId String
  chargesInvoice   ChargesInvoice @relation(fields: [chargesInvoiceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}